#include <iostream>
#include <string>
#include <vector>
#include <memory> // –¥–ª—è —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π


class Task {
protected:
    std::string description;
    std::string deadline; // –¥–∞—Ç–∞/–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    bool isCompleted;

public:
    Task(const std::string& desc, const std::string& dl)
        : description(desc), deadline(dl), isCompleted(false) {}

    virtual ~Task() = default;

    // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º)
    virtual void display() const {
        std::cout << "[" << (isCompleted ? "X" : " ") << "] "
            << description << " (–¥–æ " << deadline << ")";
    }

    virtual void complete() {
        isCompleted = true;
    }

    bool getIsCompleted() const { return isCompleted; }
    const std::string& getDescription() const { return description; }
    const std::string& getDeadline() const { return deadline; }
};

class SimpleTask : public Task {
public:
    SimpleTask(const std::string& desc, const std::string& dl)
        : Task(desc, dl) {}

    void display() const override {
        std::cout << "[–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞] ";
        Task::display();
    }
};

class ImportantTask : public Task {
public:
    ImportantTask(const std::string& desc, const std::string& dl)
        : Task(desc, dl) {}

    void display() const override {
        std::cout << "[‚ùó –í–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞] ";
        Task::display();
    }
};

class RecurringTask : public Task {
private:
    std::string recurrence; // "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ" –∏ —Ç.–¥.

public:
    RecurringTask(const std::string& desc, const std::string& dl, const std::string& rec)
        : Task(desc, dl), recurrence(rec) {}

    void display() const override {
        std::cout << "[üîÑ " << recurrence << "] ";
        Task::display();
    }
};

class Diary {
private:
    std::vector<std::unique_ptr<Task>> tasks; // –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è + —É–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏

public:
    void addTask(std::unique_ptr<Task> task) {
        tasks.push_back(std::move(task));
    }
    void addTaskFromInput() {
        std::cout << "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:\n"
            << "1. –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞\n"
            << "2. –í–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞\n"
            << "3. –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞\n"
            << "> ";

        int choice;
        std::cin >> choice;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞

        std::string description, deadline, recurrence;

        std::cout << "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ";
        std::getline(std::cin, description);

        std::cout << "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-04-25): ";
        std::getline(std::cin, deadline);

        switch (choice) {
        case 1:
            addTask(std::make_unique<SimpleTask>(description, deadline));
            break;
        case 2:
            addTask(std::make_unique<ImportantTask>(description, deadline));
            break;
        case 3:
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ): ";
            std::getline(std::cin, recurrence);
            addTask(std::make_unique<RecurringTask>(description, deadline, recurrence));
            break;
        default:
            std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!\n";
        }
    }

    void displayAllTasks() const {
        if (tasks.empty()) {
            std::cout << "–ó–∞–¥–∞—á –Ω–µ—Ç.\n";
            return;
        }

        for (size_t i = 0; i < tasks.size(); ++i) {
            std::cout << i + 1 << ". ";
            tasks[i]->display(); // –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º (–≤—ã–∑–æ–≤–µ—Ç—Å—è –Ω—É–∂–Ω—ã–π display)
            std::cout << "\n";
        }
    }

    void completeTask(size_t index) {
        if (index < tasks.size()) {
            tasks[index]->complete();
        }
    }

    void removeCompletedTasks() {
        tasks.erase(
            std::remove_if(tasks.begin(), tasks.end(),
                [](const std::unique_ptr<Task>& task) {
                    return task->getIsCompleted();
                }),
            tasks.end()
                    );
    }
};

void clearInputBuffer() {
    std::cin.clear();
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

int main() {
    setlocale(LC_ALL, "RU");
    /*Diary diary;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    diary.addTask(std::make_unique<SimpleTask>("–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "2025-04-23"));
    diary.addTask(std::make_unique<ImportantTask>("–°–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "2025-04-25"));
    diary.addTask(std::make_unique<RecurringTask>("–£–±–æ—Ä–∫–∞", "2025-04-24", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"));

    // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    diary.displayAllTasks();

    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
    diary.completeTask(0);

    // –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    diary.removeCompletedTasks();

    std::cout << "\n–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:\n";
    diary.displayAllTasks();

    return 0;*/

    Diary diary;
    int choice;

    while (true) {
        std::cout << "\n=== –ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ ===\n"
            << "1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
            << "2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
            << "3. –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
            << "4. –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            << "5. –í—ã—Ö–æ–¥\n"
            << "> ";

        std::cin >> choice;
        clearInputBuffer(); // –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞

        switch (choice) {
        case 1:
            diary.addTaskFromInput();
            break;
        case 2:
            diary.displayAllTasks();
            break;
        case 3: {
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏: ";
            size_t index;
            std::cin >> index;
            clearInputBuffer();
            diary.completeTask(index - 1); // -1, —Ç.–∫. –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 0
            break;
        }
        case 4:
            diary.removeCompletedTasks();
            std::cout << "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.\n";
            break;
        case 5:
            return 0;
        default:
            std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!\n";
        }
    }
}
