#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <limits>
#include <algorithm>

// –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –º–∞–∫—Ä–æ—Å—ã –∏–∑ Windows.h
#ifdef _WIN32
#define NOMINMAX  // –û—Ç–∫–ª—é—á–∞–µ–º min/max –º–∞–∫—Ä–æ—Å—ã
#include <windows.h>
#undef RED        // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –º–∞–∫—Ä–æ—Å—ã
#undef GREEN
#undef BLUE
#undef YELLOW
#undef MAGENTA
#undef CYAN
#undef BOLD
#endif

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –º–∞–∫—Ä–æ—Å—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º COLOR_
#define COLOR_RESET   "\033[0m"
#define COLOR_RED     "\033[31m"
#define COLOR_GREEN   "\033[32m"
#define COLOR_YELLOW  "\033[33m"
#define COLOR_BLUE    "\033[34m"
#define COLOR_MAGENTA "\033[35m"
#define COLOR_CYAN    "\033[36m"
#define COLOR_BOLD    "\033[1m"

// –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ANSI-—Ü–≤–µ—Ç–æ–≤ –≤ Windows
#ifdef _WIN32
void enableANSIColors() {
    HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
    DWORD dwMode = 0;
    GetConsoleMode(hOut, &dwMode);
    dwMode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING;
    SetConsoleMode(hOut, dwMode);
}
#endif

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Task
class Task {
protected:
    std::string description;
    std::string deadline;
    bool isCompleted;

public:
    Task(const std::string& desc, const std::string& dl)
        : description(desc), deadline(dl), isCompleted(false) {}

    virtual ~Task() = default;

    virtual void display() const {
        std::cout << "[" << (isCompleted ? "X" : " ") << "] "
            << description << " (–¥–æ " << deadline << ")";
    }

    virtual void complete() {
        isCompleted = true;
    }

    bool getIsCompleted() const { return isCompleted; }
    const std::string& getDescription() const { return description; }
    const std::string& getDeadline() const { return deadline; }
};

// –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∑–∞–¥–∞—á
class SimpleTask : public Task {
public:
    SimpleTask(const std::string& desc, const std::string& dl)
        : Task(desc, dl) {}

    void display() const override {
        std::cout << COLOR_CYAN << "[–û–±—ã—á–Ω–∞—è] " << COLOR_RESET;
        Task::display();
    }
};

class ImportantTask : public Task {
public:
    ImportantTask(const std::string& desc, const std::string& dl)
        : Task(desc, dl) {}

    void display() const override {
        std::cout << COLOR_RED << COLOR_BOLD << "[‚ùó –í–∞–∂–Ω–æ] " << COLOR_RESET;
        Task::display();
    }
};

class RecurringTask : public Task {
private:
    std::string recurrence;

public:
    RecurringTask(const std::string& desc, const std::string& dl, const std::string& rec)
        : Task(desc, dl), recurrence(rec) {}

    void display() const override {
        std::cout << COLOR_MAGENTA << "[üîÑ " << recurrence << "] " << COLOR_RESET;
        Task::display();
    }
};

// –ö–ª–∞—Å—Å Diary
class Diary {
private:
    std::vector<std::unique_ptr<Task>> tasks;

    void clearInputBuffer() {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    }

public:
    void addTask(std::unique_ptr<Task> task) {
        tasks.push_back(std::move(task));
    }

    void addTaskFromInput() {
        std::cout << "\n" << COLOR_BOLD << "üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞" << COLOR_RESET << "\n";
        std::cout << "1. –û–±—ã—á–Ω–∞—è\n";
        std::cout << "2. –í–∞–∂–Ω–∞—è\n";
        std::cout << "3. –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è\n";
        std::cout << "> ";

        int type;
        std::cin >> type;
        clearInputBuffer();

        if (type < 1 || type > 3) {
            std::cout << COLOR_RED << "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø.\n" << COLOR_RESET;
            return;
        }

        std::string desc, deadline, recurrence;

        std::cout << "–û–ø–∏—Å–∞–Ω–∏–µ: ";
        std::getline(std::cin, desc);

        std::cout << "–°—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-04-30): ";
        std::getline(std::cin, deadline);

        switch (type) {
        case 1: addTask(std::make_unique<SimpleTask>(desc, deadline)); break;
        case 2: addTask(std::make_unique<ImportantTask>(desc, deadline)); break;
        case 3:
            std::cout << "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ/–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ): ";
            std::getline(std::cin, recurrence);
            addTask(std::make_unique<RecurringTask>(desc, deadline, recurrence));
            break;
        }

        std::cout << COLOR_GREEN << "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n" << COLOR_RESET;
    }

    void displayAllTasks() const {
        if (tasks.empty()) {
            std::cout << COLOR_YELLOW << "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n" << COLOR_RESET;
            return;
        }

        for (size_t i = 0; i < tasks.size(); ++i) {
            std::cout << i + 1 << ". ";
            tasks[i]->display();
            std::cout << "\n";
        }
    }

    void markTaskComplete() {
        if (tasks.empty()) {
            std::cout << COLOR_YELLOW << "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏!\n" << COLOR_RESET;
            return;
        }

        std::cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ";
        size_t index;
        std::cin >> index;
        clearInputBuffer();

        if (index > 0 && index <= tasks.size()) {
            tasks[index - 1]->complete();
            std::cout << COLOR_GREEN << "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π!\n" << COLOR_RESET;
        }
        else {
            std::cout << COLOR_RED << "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏!\n" << COLOR_RESET;
        }
    }

    void removeCompletedTasks() {
        tasks.erase(
            std::remove_if(tasks.begin(), tasks.end(),
                [](const std::unique_ptr<Task>& task) {
                    return task->getIsCompleted();
                }),
            tasks.end()
                    );
    }

    void showMenu() {
#ifdef _WIN32
        enableANSIColors();
#endif

        while (true) {
            std::cout << "\n" << COLOR_BOLD << COLOR_BLUE << "=== –ï–ñ–ï–î–ù–ï–í–ù–ò–ö ===" << COLOR_RESET << "\n";
            std::cout << "1. üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n";
            std::cout << "2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n";
            std::cout << "3. ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n";
            std::cout << "4. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n";
            std::cout << "5. üö™ –í—ã—Ö–æ–¥\n";
            std::cout << "> ";

            int choice;
            std::cin >> choice;
            clearInputBuffer();

            switch (choice) {
            case 1: addTaskFromInput(); break;
            case 2: displayAllTasks(); break;
            case 3: markTaskComplete(); break;
            case 4: removeCompletedTasks();
                std::cout << COLOR_GREEN << "–ì–æ—Ç–æ–≤–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.\n" << COLOR_RESET;
                break;
            case 5: return;
            default: std::cout << COLOR_RED << "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.\n" << COLOR_RESET;
            }
        }
    }
};

int main() {
    setlocale(LC_ALL, "RU");
    Diary diary;
    diary.showMenu();
    return 0;
}
